<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="gg__module_8h" kind="file" language="C++">
    <compoundname>gg_module.h</compoundname>
    <includes refid="gg__results_8h" local="yes">xp/common/gg_results.h</includes>
    <includes refid="gg__utils_8h" local="yes">xp/common/gg_utils.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="11">
        <label>assert.h</label>
      </node>
      <node id="9">
        <label>xp/common/gg_memory.h</label>
        <link refid="gg__memory_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="8">
        <label>xp/common/gg_strings.h</label>
        <link refid="gg__strings_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="7">
        <label>xp/common/gg_types.h</label>
        <link refid="gg__types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>xp/common/gg_results.h</label>
        <link refid="gg__results_8h"/>
      </node>
      <node id="10">
        <label>xp/common/gg_port.h</label>
        <link refid="gg__port_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>xp/common/gg_utils.h</label>
        <link refid="gg__utils_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>xp/module/gg_module.h</label>
        <link refid="gg__module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___module_1gab79a5cf4b9c61da13797581e914bebca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Module_Initialize</definition>
        <argsstring>(void)</argsstring>
        <name>GG_Module_Initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the Golden Gate library.</para>
<para>This functions must be called before any of the other library functions can be called. It is normally called just once, but it is safe to call it more than once, provided that it is not called concurrently from different threads. If a submodule fails to initialize before returning, this function will internally call GG_Module_Terminate before returning.</para>
<para><simplesect kind="return"><para>GG_SUCCESS if the library was initialized, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/module/gg_module.h" line="51" column="11" declfile="xp/module/gg_module.h" declline="51" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___module_1gaf694d2ed5e4c91096eb032389515c14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Module_Terminate</definition>
        <argsstring>(void)</argsstring>
        <name>GG_Module_Terminate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate the Golden Gate library.</para>
<para>This function must be called when the host application knows it will no longer make any other calls to the library. All the registered termination handlers will be called, once each, in the reverse order in which they were registered. This function should be called from the same thread as the one from which <ref refid="group___module_1gab79a5cf4b9c61da13797581e914bebca" kindref="member">GG_Module_Initialize()</ref> was called, and must never be called concurrently from two different threads. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/module/gg_module.h" line="64" column="6" declfile="xp/module/gg_module.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___module_1ga400d47226306f1e44406042d8e2b9754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Module_RegisterTerminationHandler</definition>
        <argsstring>(GG_GenericCallbackHandler *handler)</argsstring>
        <name>GG_Module_RegisterTerminationHandler</name>
        <param>
          <type><ref refid="struct_g_g___generic_callback_handler" kindref="compound">GG_GenericCallbackHandler</ref> *</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a termination handler. All registered handlers will be called exactly once each when <ref refid="group___module_1gaf694d2ed5e4c91096eb032389515c14e" kindref="member">GG_Module_Terminate()</ref> is called.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Handler to register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if the handler could be registered, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/module/gg_module.h" line="73" column="11" declfile="xp/module/gg_module.h" declline="73" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Module-wide functions and data. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright 2017-2020 Fitbit, Inc SPDX-License-Identifier: Apache-2.0</para>
</simplesect>
<simplesect kind="author"><para>Gilles Boccon-Gibod</para>
</simplesect>
<simplesect kind="date"><para>2017-12-20</para>
</simplesect>
General module-wide functions that relate to the global state of the library. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="19"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="22"><highlight class="comment">|<sp/><sp/><sp/>includes</highlight></codeline>
<codeline lineno="23"><highlight class="comment">+---------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gg__results_8h" kindref="compound">xp/common/gg_results.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gg__utils_8h" kindref="compound">xp/common/gg_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="36"><highlight class="comment">|<sp/><sp/><sp/>functions</highlight></codeline>
<codeline lineno="37"><highlight class="comment">+---------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="group___module_1gab79a5cf4b9c61da13797581e914bebca" kindref="member">GG_Module_Initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___module_1gaf694d2ed5e4c91096eb032389515c14e" kindref="member">GG_Module_Terminate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="group___module_1ga400d47226306f1e44406042d8e2b9754" kindref="member">GG_Module_RegisterTerminationHandler</ref>(<ref refid="struct_g_g___generic_callback_handler" kindref="compound">GG_GenericCallbackHandler</ref>*<sp/>handler);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="xp/module/gg_module.h"/>
  </compounddef>
</doxygen>
