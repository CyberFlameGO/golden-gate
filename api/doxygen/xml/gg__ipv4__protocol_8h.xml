<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="gg__ipv4__protocol_8h" kind="file" language="C++">
    <compoundname>gg_ipv4_protocol.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="gg__protocols_8h" local="yes">xp/protocols/gg_protocols.h</includes>
    <includes refid="gg__sockets_8h" local="yes">xp/sockets/gg_sockets.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="15">
        <label>assert.h</label>
      </node>
      <node id="13">
        <label>xp/common/gg_memory.h</label>
        <link refid="gg__memory_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>xp/sockets/gg_sockets.h</label>
        <link refid="gg__sockets_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>xp/protocols/gg_protocols.h</label>
        <link refid="gg__protocols_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>xp/common/gg_strings.h</label>
        <link refid="gg__strings_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>xp/common/gg_lists.h</label>
        <link refid="gg__lists_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="11">
        <label>xp/common/gg_io.h</label>
        <link refid="gg__io_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>xp/protocols/gg_ipv4_protocol.h</label>
        <link refid="gg__ipv4__protocol_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>xp/common/gg_types.h</label>
        <link refid="gg__types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>xp/common/gg_ring_buffer.h</label>
        <link refid="gg__ring__buffer_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>xp/common/gg_inspect.h</label>
        <link refid="gg__inspect_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>xp/common/gg_results.h</label>
        <link refid="gg__results_8h"/>
      </node>
      <node id="16">
        <label>xp/loop/gg_loop.h</label>
        <link refid="gg__loop_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>xp/common/gg_port.h</label>
        <link refid="gg__port_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>xp/common/gg_buffer.h</label>
        <link refid="gg__buffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>xp/common/gg_timer.h</label>
        <link refid="gg__timer_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_g_g___ipv4_packet_header" prot="public">GG_Ipv4PacketHeader</innerclass>
    <innerclass refid="struct_g_g___udp_packet_header" prot="public">GG_UdpPacketHeader</innerclass>
    <innerclass refid="struct_g_g___ipv4_frame_serialization_ip_config" prot="public">GG_Ipv4FrameSerializationIpConfig</innerclass>
    <innerclass refid="struct_g_g___ipv4_frame_assembler_ip_map" prot="public">GG_Ipv4FrameAssemblerIpMap</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1a16e46494577bb6da08f1a4a5cfb33f63" prot="public" static="no">
        <name>GG_IPV4_MIN_IP_HEADER_SIZE</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="32" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1a244d68d722722e334d083fb8b7c2972b" prot="public" static="no">
        <name>GG_IPV4_MAX_IP_HEADER_SIZE</name>
        <initializer>60</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="33" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1a876968a8c26e821db4a9bd9dc5a18546" prot="public" static="no">
        <name>GG_UDP_HEADER_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="34" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1a45ed6ec86ecb3ae4abc20f61e150d281" prot="public" static="no">
        <name>GG_IPV4_PROTOCOL_ICMP</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="36" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1af3922d9ac2482dba5145c158110f52f8" prot="public" static="no">
        <name>GG_IPV4_PROTOCOL_TCP</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="37" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1a2c3a7f53a594f77e43ba16fe4c87717f" prot="public" static="no">
        <name>GG_IPV4_PROTOCOL_UDP</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="38" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1ad5f769f9e459f2d0c08fa3920d28697b" prot="public" static="no">
        <name>GG_IPV4_HEADER_SOURCE_ADDRESS_OFFSET</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="41" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gg__ipv4__protocol_8h_1a56533b8cce2dde5548a1062363e48d67" prot="public" static="no">
        <name>GG_IPV4_HEADER_DESTINATION_ADDRESS_OFFSET</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="43" column="9" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" prot="public" static="no">
        <type>struct <ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref></type>
        <definition>typedef struct GG_Ipv4FrameAssembler GG_Ipv4FrameAssembler</definition>
        <argsstring></argsstring>
        <name>GG_Ipv4FrameAssembler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frame Assember that can re-assemble IPv4 packets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="124" column="5" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" prot="public" static="no">
        <type>struct <ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref></type>
        <definition>typedef struct GG_Ipv4FrameSerializer GG_Ipv4FrameSerializer</definition>
        <argsstring></argsstring>
        <name>GG_Ipv4FrameSerializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frame Serializer that can serialize IPv4 packets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="124" column="5" bodyfile="xp/protocols/gg_ipv4_protocol.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1a0c7f116332bdbaf036da305fe8319459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Ipv4FrameAssembler_Create</definition>
        <argsstring>(uint16_t max_packet_size, const GG_Ipv4FrameSerializationIpConfig *ip_config, const GG_Ipv4FrameAssemblerIpMap *ip_map, GG_Ipv4FrameAssembler **assembler)</argsstring>
        <name>GG_Ipv4FrameAssembler_Create</name>
        <param>
          <type>uint16_t</type>
          <declname>max_packet_size</declname>
        </param>
        <param>
          <type>const <ref refid="struct_g_g___ipv4_frame_serialization_ip_config" kindref="compound">GG_Ipv4FrameSerializationIpConfig</ref> *</type>
          <declname>ip_config</declname>
        </param>
        <param>
          <type>const <ref refid="struct_g_g___ipv4_frame_assembler_ip_map" kindref="compound">GG_Ipv4FrameAssemblerIpMap</ref> *</type>
          <declname>ip_map</declname>
        </param>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref> **</type>
          <declname>assembler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an GG_Ipv4FrameAssembler instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_packet_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum packet size that can be re-assembled by the frame assembler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration options used for header compression. If NULL, no compression will be done. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip_map</parametername>
</parameternamelist>
<parameterdescription>
<para>Source/Destination IP address remapping info. If NULL, no remapping will be done. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>assembler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where the new instance will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if an instance was created, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="126" column="11" declfile="xp/protocols/gg_ipv4_protocol.h" declline="126" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1a98b8adca3ae10bacf6007a171f37e168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Ipv4FrameAssembler_Destroy</definition>
        <argsstring>(GG_Ipv4FrameAssembler *self)</argsstring>
        <name>GG_Ipv4FrameAssembler_Destroy</name>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="136" column="6" declfile="xp/protocols/gg_ipv4_protocol.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1a6141fae47d25ba36b137da3da6daf9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_g_g___frame_assembler" kindref="compound">GG_FrameAssembler</ref> *</type>
        <definition>GG_FrameAssembler* GG_Ipv4FrameAssembler_AsFrameAssembler</definition>
        <argsstring>(GG_Ipv4FrameAssembler *self)</argsstring>
        <name>GG_Ipv4FrameAssembler_AsFrameAssembler</name>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="struct_g_g___frame_assembler" kindref="compound">GG_FrameAssembler</ref> interface for this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Object on this this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="struct_g_g___frame_assembler" kindref="compound">GG_FrameAssembler</ref> interface for this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="144" column="19" declfile="xp/protocols/gg_ipv4_protocol.h" declline="144" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1acf76ec0929e5995479f555919c887388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_g_g___inspectable" kindref="compound">GG_Inspectable</ref> *</type>
        <definition>GG_Inspectable* GG_Ipv4FrameAssembler_AsInspectable</definition>
        <argsstring>(GG_Ipv4FrameAssembler *self)</argsstring>
        <name>GG_Ipv4FrameAssembler_AsInspectable</name>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="struct_g_g___inspectable" kindref="compound">GG_Inspectable</ref> interface for this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Object on this this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_g_g___inspectable" kindref="compound">GG_Inspectable</ref> interface for this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="152" column="16" declfile="xp/protocols/gg_ipv4_protocol.h" declline="152" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1adfa325325b427106a104baeaa9827fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Ipv4FrameSerializer_Create</definition>
        <argsstring>(const GG_Ipv4FrameSerializationIpConfig *ip_config, GG_Ipv4FrameSerializer **serializer)</argsstring>
        <name>GG_Ipv4FrameSerializer_Create</name>
        <param>
          <type>const <ref refid="struct_g_g___ipv4_frame_serialization_ip_config" kindref="compound">GG_Ipv4FrameSerializationIpConfig</ref> *</type>
          <declname>ip_config</declname>
        </param>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref> **</type>
          <declname>serializer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an GG_Ipv4FrameSerializer instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ip_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration options used for header decompression. If NULL, decompression won&apos;t be supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serializer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where the new instance will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if an instance was created, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="162" column="11" declfile="xp/protocols/gg_ipv4_protocol.h" declline="162" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1ad7ccc7dc1c55f22e8302d78ef65e31d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_g_g___frame_serializer" kindref="compound">GG_FrameSerializer</ref> *</type>
        <definition>GG_FrameSerializer* GG_Ipv4FrameSerializer_AsFrameSerializer</definition>
        <argsstring>(GG_Ipv4FrameSerializer *self)</argsstring>
        <name>GG_Ipv4FrameSerializer_AsFrameSerializer</name>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="struct_g_g___frame_serializer" kindref="compound">GG_FrameSerializer</ref> interface for this object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Object on this this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="struct_g_g___frame_serializer" kindref="compound">GG_FrameSerializer</ref> interface for this object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="171" column="20" declfile="xp/protocols/gg_ipv4_protocol.h" declline="171" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1a79937b7b0d7ebfeab0738cc66cafad62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Ipv4FrameSerializer_Destroy</definition>
        <argsstring>(GG_Ipv4FrameSerializer *self)</argsstring>
        <name>GG_Ipv4FrameSerializer_Destroy</name>
        <param>
          <type><ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>Object on which this method is called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="178" column="6" declfile="xp/protocols/gg_ipv4_protocol.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1aca500d7525463e65bf8282134e9d81d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t GG_Ipv4Checksum</definition>
        <argsstring>(const uint8_t *data, size_t data_size)</argsstring>
        <name>GG_Ipv4Checksum</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the IPv4 checksum for a buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to compute the checksum for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes of data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The checksum value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="188" column="10" declfile="xp/protocols/gg_ipv4_protocol.h" declline="188" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1a5c4761f77dd97a78d8b9627b1dd467fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Ipv4PacketHeader_Serialize</definition>
        <argsstring>(const GG_Ipv4PacketHeader *self, uint8_t *buffer, size_t *buffer_size, bool compute_checksum)</argsstring>
        <name>GG_Ipv4PacketHeader_Serialize</name>
        <param>
          <type>const <ref refid="struct_g_g___ipv4_packet_header" kindref="compound">GG_Ipv4PacketHeader</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>compute_checksum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an IPv4 header</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The header to serialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to serialize into. If NULL is passed, no serialization is performed, but the size needed to serialize this header is returned via the buffer_size parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>[in,out] Pointer to the size of the buffer (or to a 0 value if buffer is NULL). When the method returns, this value is updated with the number of bytes serialized into the buffer, or the number of bytes needed if the buffer size passed was too small. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compute_checksum</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if the checksum should be computed locally.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
NOTE: this method does not fully validate that the fields of the packet header are valid, so the serialized data may not be a valid IPv4 packet header if the input structure was not itself valid.</para>
<para><simplesect kind="return"><para>GG_SUCCESS if the header could be serialized or the buffer was NULL, GG_ERROR_NOT_ENOUGH_SPACE if the buffer is too small, or another negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="207" column="11" declfile="xp/protocols/gg_ipv4_protocol.h" declline="207" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1aef879200f2c2961eb1ab845ed97ab347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Ipv4PacketHeader_Parse</definition>
        <argsstring>(GG_Ipv4PacketHeader *self, const uint8_t *packet, size_t packet_size)</argsstring>
        <name>GG_Ipv4PacketHeader_Parse</name>
        <param>
          <type><ref refid="struct_g_g___ipv4_packet_header" kindref="compound">GG_Ipv4PacketHeader</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>packet_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse an IPv4 header from its serialized form.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The header whose fields will be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>A data buffer containing an IPv4 header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if a valid header was found and parsed, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="221" column="11" declfile="xp/protocols/gg_ipv4_protocol.h" declline="221" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1aae5a345e18adf82acfcb3f27d8435f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_UdpPacketHeader_Serialize</definition>
        <argsstring>(const GG_UdpPacketHeader *self, uint8_t *buffer)</argsstring>
        <name>GG_UdpPacketHeader_Serialize</name>
        <param>
          <type>const <ref refid="struct_g_g___udp_packet_header" kindref="compound">GG_UdpPacketHeader</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize a UDP header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The UDP header to serialize. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to serialize into. This buffer must be able to hold at least GG_UDP_HEADER_SIZE bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if the header could be serialized, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="232" column="11" declfile="xp/protocols/gg_ipv4_protocol.h" declline="232" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="gg__ipv4__protocol_8h_1ae5a68c64819e4b72b770c3315c90d9c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_UdpPacketHeader_Parse</definition>
        <argsstring>(GG_UdpPacketHeader *self, const uint8_t *packet, size_t packet_size)</argsstring>
        <name>GG_UdpPacketHeader_Parse</name>
        <param>
          <type><ref refid="struct_g_g___udp_packet_header" kindref="compound">GG_UdpPacketHeader</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>packet_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse a UDP header from its serialized form.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The header whose fields will be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>A data buffer containing a UDP header. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packet_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if a valid header was found and parsed, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/protocols/gg_ipv4_protocol.h" line="243" column="11" declfile="xp/protocols/gg_ipv4_protocol.h" declline="243" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright 2017-2020 Fitbit, Inc SPDX-License-Identifier: Apache-2.0</para>
</simplesect>
<simplesect kind="author"><para>Gilles Boccon-Gibod</para>
</simplesect>
<simplesect kind="date"><para>2017-11-21 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="22"><highlight class="comment">|<sp/><sp/><sp/>includes</highlight></codeline>
<codeline lineno="23"><highlight class="comment">+---------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gg__protocols_8h" kindref="compound">xp/protocols/gg_protocols.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gg__sockets_8h" kindref="compound">xp/sockets/gg_sockets.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="30"><highlight class="comment">|<sp/><sp/><sp/>constants</highlight></codeline>
<codeline lineno="31"><highlight class="comment">+---------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_MIN_IP_HEADER_SIZE<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_MAX_IP_HEADER_SIZE<sp/>60</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_UDP_HEADER_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_PROTOCOL_ICMP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_PROTOCOL_TCP<sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_PROTOCOL_UDP<sp/><sp/>17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Offset<sp/>of<sp/>the<sp/>Source<sp/>IP<sp/>Address<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_HEADER_SOURCE_ADDRESS_OFFSET<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Offset<sp/>of<sp/>the<sp/>Destination<sp/>IP<sp/>Address<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GG_IPV4_HEADER_DESTINATION_ADDRESS_OFFSET<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="46"><highlight class="comment">|<sp/><sp/><sp/>types</highlight></codeline>
<codeline lineno="47"><highlight class="comment">+---------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref><sp/><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref><sp/><ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="struct_g_g___ipv4_packet_header" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>version;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>ihl;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>dscp;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>ecn;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>total_length;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>identification;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>flags;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>fragment_offset;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>ttl;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>protocol;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>checksum;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>src_address;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>dst_address;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/>options[40];</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><ref refid="struct_g_g___ipv4_packet_header" kindref="compound">GG_Ipv4PacketHeader</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="struct_g_g___udp_packet_header" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>src_port;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>dst_port;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>length;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>checksum;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><ref refid="struct_g_g___udp_packet_header" kindref="compound">GG_UdpPacketHeader</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="struct_g_g___ipv4_frame_serialization_ip_config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96" refid="struct_g_g___ipv4_frame_serialization_ip_config_1a0f3d93084fa63fdb9d7f84244e53b3c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_g_g___ipv4_frame_serialization_ip_config_1a0f3d93084fa63fdb9d7f84244e53b3c9" kindref="member">default_src_address</ref>;<sp/></highlight></codeline>
<codeline lineno="97" refid="struct_g_g___ipv4_frame_serialization_ip_config_1a6c50f9fcefef12ce27bc3c87e326df64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_g_g___ipv4_frame_serialization_ip_config_1a6c50f9fcefef12ce27bc3c87e326df64" kindref="member">default_dst_address</ref>;<sp/></highlight></codeline>
<codeline lineno="98" refid="struct_g_g___ipv4_frame_serialization_ip_config_1a0ebb2840c270d8bf06f2892cb4546dcb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>udp_src_ports[3];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99" refid="struct_g_g___ipv4_frame_serialization_ip_config_1acffab5246b44946b3ced5692de8069df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>udp_dst_ports[3];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/><ref refid="struct_g_g___ipv4_frame_serialization_ip_config" kindref="compound">GG_Ipv4FrameSerializationIpConfig</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="struct_g_g___ipv4_frame_assembler_ip_map" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107" refid="struct_g_g___ipv4_frame_assembler_ip_map_1a022d3e122b7e3441a708a42b19cd5d12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_g_g___ipv4_frame_assembler_ip_map_1a022d3e122b7e3441a708a42b19cd5d12" kindref="member">src_address</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108" refid="struct_g_g___ipv4_frame_assembler_ip_map_1af87a2711576c6f2e4c7d57902bbe2fe5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_g_g___ipv4_frame_assembler_ip_map_1af87a2711576c6f2e4c7d57902bbe2fe5" kindref="member">remapped_src_address</ref>;<sp/></highlight></codeline>
<codeline lineno="109" refid="struct_g_g___ipv4_frame_assembler_ip_map_1a2554fe73901bac04956288efea7270b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_g_g___ipv4_frame_assembler_ip_map_1a2554fe73901bac04956288efea7270b5" kindref="member">dst_address</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="struct_g_g___ipv4_frame_assembler_ip_map_1a09f6e0aecc53c6be44fd85d1856d8426" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_g_g___ipv4_frame_assembler_ip_map_1a09f6e0aecc53c6be44fd85d1856d8426" kindref="member">remapped_dst_address</ref>;<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><ref refid="struct_g_g___ipv4_frame_assembler_ip_map" kindref="compound">GG_Ipv4FrameAssemblerIpMap</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="114"><highlight class="comment">|<sp/><sp/><sp/>functions</highlight></codeline>
<codeline lineno="115"><highlight class="comment">+---------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="gg__ipv4__protocol_8h_1a0c7f116332bdbaf036da305fe8319459" kindref="member">GG_Ipv4FrameAssembler_Create</ref>(uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_packet_size,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_g___ipv4_frame_serialization_ip_config" kindref="compound">GG_Ipv4FrameSerializationIpConfig</ref>*<sp/>ip_config,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_g___ipv4_frame_assembler_ip_map" kindref="compound">GG_Ipv4FrameAssemblerIpMap</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip_map,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="gg__ipv4__protocol_8h_1a98b8adca3ae10bacf6007a171f37e168" kindref="member">GG_Ipv4FrameAssembler_Destroy</ref>(<ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="struct_g_g___frame_assembler" kindref="compound">GG_FrameAssembler</ref>*<sp/><ref refid="gg__ipv4__protocol_8h_1a6141fae47d25ba36b137da3da6daf9bb" kindref="member">GG_Ipv4FrameAssembler_AsFrameAssembler</ref>(<ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="struct_g_g___inspectable" kindref="compound">GG_Inspectable</ref>*<sp/><ref refid="gg__ipv4__protocol_8h_1acf76ec0929e5995479f555919c887388" kindref="member">GG_Ipv4FrameAssembler_AsInspectable</ref>(<ref refid="gg__ipv4__protocol_8h_1aeb4a58be024071e9c0e735dc387610cc" kindref="member">GG_Ipv4FrameAssembler</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="gg__ipv4__protocol_8h_1adfa325325b427106a104baeaa9827fc4" kindref="member">GG_Ipv4FrameSerializer_Create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_g___ipv4_frame_serialization_ip_config" kindref="compound">GG_Ipv4FrameSerializationIpConfig</ref>*<sp/>ip_config,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref>**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>serializer);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="struct_g_g___frame_serializer" kindref="compound">GG_FrameSerializer</ref>*<sp/><ref refid="gg__ipv4__protocol_8h_1ad7ccc7dc1c55f22e8302d78ef65e31d5" kindref="member">GG_Ipv4FrameSerializer_AsFrameSerializer</ref>(<ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="gg__ipv4__protocol_8h_1a79937b7b0d7ebfeab0738cc66cafad62" kindref="member">GG_Ipv4FrameSerializer_Destroy</ref>(<ref refid="gg__ipv4__protocol_8h_1ae0261e2d623800aab230b81550c7aebc" kindref="member">GG_Ipv4FrameSerializer</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">uint16_t<sp/><ref refid="gg__ipv4__protocol_8h_1aca500d7525463e65bf8282134e9d81d5" kindref="member">GG_Ipv4Checksum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>data_size);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="gg__ipv4__protocol_8h_1a5c4761f77dd97a78d8b9627b1dd467fa" kindref="member">GG_Ipv4PacketHeader_Serialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_g___ipv4_packet_header" kindref="compound">GG_Ipv4PacketHeader</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_checksum);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="gg__ipv4__protocol_8h_1aef879200f2c2961eb1ab845ed97ab347" kindref="member">GG_Ipv4PacketHeader_Parse</ref>(<ref refid="struct_g_g___ipv4_packet_header" kindref="compound">GG_Ipv4PacketHeader</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>packet,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>packet_size);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="gg__ipv4__protocol_8h_1aae5a345e18adf82acfcb3f27d8435f72" kindref="member">GG_UdpPacketHeader_Serialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_g_g___udp_packet_header" kindref="compound">GG_UdpPacketHeader</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>uint8_t*<sp/>buffer);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref><sp/><ref refid="gg__ipv4__protocol_8h_1ae5a68c64819e4b72b770c3315c90d9c1" kindref="member">GG_UdpPacketHeader_Parse</ref>(<ref refid="struct_g_g___udp_packet_header" kindref="compound">GG_UdpPacketHeader</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>packet,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>packet_size);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="xp/protocols/gg_ipv4_protocol.h"/>
  </compounddef>
</doxygen>
