<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="group___inspection" kind="group">
    <compoundname>Inspection</compoundname>
    <title>Inspection</title>
    <innerclass refid="struct_g_g___inspection_options" prot="public">GG_InspectionOptions</innerclass>
    <innerclass refid="struct_g_g___inspectable" prot="public">GG_Inspectable</innerclass>
    <innerclass refid="struct_g_g___inspector" prot="public">GG_Inspector</innerclass>
    <innerclass refid="struct_g_g___inspector_interface" prot="public">GG_InspectorInterface</innerclass>
    <innerclass refid="struct_g_g___inspectable_interface" prot="public">GG_InspectableInterface</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___inspection_1ga7b8172d107319cc55a968cc52978c8d2" prot="public" static="no" strong="no">
        <type></type>
        <name>GG_InspectorFormatHint</name>
        <enumvalue id="group___inspection_1gga7b8172d107319cc55a968cc52978c8d2a38a63fe8d990204abe90f590717a6559" prot="public">
          <name>GG_INSPECTOR_FORMAT_HINT_NONE</name>
          <briefdescription>
<para>No special formatting hint. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___inspection_1gga7b8172d107319cc55a968cc52978c8d2a82c83c1c10eb952543e79110b6244893" prot="public">
          <name>GG_INSPECTOR_FORMAT_HINT_HEX</name>
          <briefdescription>
<para>The value should be displayed in hexadecimal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___inspection_1gga7b8172d107319cc55a968cc52978c8d2af2f47308aea5c1ffae3d3fdd00032501" prot="public">
          <name>GG_INSPECTOR_FORMAT_HINT_UNSIGNED</name>
          <briefdescription>
<para>The value should be displayed as an unsigned integer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hint that indicates to the inspector how a value should be displayed if the inspector needs to display the value in a human-readable form. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="47" column="14" bodyfile="xp/common/gg_inspect.h" bodystart="47" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___inspection_1ga71d0c1a8195213f1fa8c2cc37e459ac0" prot="public" static="no">
        <type>struct <ref refid="group___inspection_1ga71d0c1a8195213f1fa8c2cc37e459ac0" kindref="member">GG_LoggingInspector</ref></type>
        <definition>typedef struct GG_LoggingInspector GG_LoggingInspector</definition>
        <argsstring></argsstring>
        <name>GG_LoggingInspector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Class that implements the <ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> interface and outputs all inspected values through a logger. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="148" column="11" bodyfile="xp/common/gg_inspect.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___inspection_1ga776827e55156f5ab09a644ad61fc16b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnObjectStart</definition>
        <argsstring>(GG_Inspector *self, const char *name)</argsstring>
        <name>GG_Inspector_OnObjectStart</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="105" column="6" declfile="xp/common/gg_inspect.h" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1gaa55d42add72dbf74fdaf8f2b22106b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnObjectEnd</definition>
        <argsstring>(GG_Inspector *self)</argsstring>
        <name>GG_Inspector_OnObjectEnd</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="106" column="6" declfile="xp/common/gg_inspect.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga0b69a058988ff9613cc62ccb5b3c4a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnArrayStart</definition>
        <argsstring>(GG_Inspector *self, const char *name)</argsstring>
        <name>GG_Inspector_OnArrayStart</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="107" column="6" declfile="xp/common/gg_inspect.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga66a6900ca26115c5e510897d014ece79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnArrayEnd</definition>
        <argsstring>(GG_Inspector *self)</argsstring>
        <name>GG_Inspector_OnArrayEnd</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="108" column="6" declfile="xp/common/gg_inspect.h" declline="108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga310097aa0fec31d0dbb5fbe9eaa1c4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnInspectable</definition>
        <argsstring>(GG_Inspector *self, const char *name, GG_Inspectable *inspectable)</argsstring>
        <name>GG_Inspector_OnInspectable</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="struct_g_g___inspectable" kindref="compound">GG_Inspectable</ref> *</type>
          <declname>inspectable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="109" column="6" declfile="xp/common/gg_inspect.h" declline="109" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga46fb11e8cfdac58f1eff90cbabd34bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnString</definition>
        <argsstring>(GG_Inspector *self, const char *name, const char *value)</argsstring>
        <name>GG_Inspector_OnString</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="110" column="6" declfile="xp/common/gg_inspect.h" declline="110" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga02e3d53abc19bd3942a7681c3abc0c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnBoolean</definition>
        <argsstring>(GG_Inspector *self, const char *name, bool value)</argsstring>
        <name>GG_Inspector_OnBoolean</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="111" column="6" declfile="xp/common/gg_inspect.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1gaaa252f847e2df984fc5c1cdc3043b0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnInteger</definition>
        <argsstring>(GG_Inspector *self, const char *name, int64_t value, GG_InspectorFormatHint format_hint)</argsstring>
        <name>GG_Inspector_OnInteger</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="group___inspection_1ga7b8172d107319cc55a968cc52978c8d2" kindref="member">GG_InspectorFormatHint</ref></type>
          <declname>format_hint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="112" column="6" declfile="xp/common/gg_inspect.h" declline="112" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga03fba2ed7cdec535f2bf60dd66373d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnFloat</definition>
        <argsstring>(GG_Inspector *self, const char *name, double value)</argsstring>
        <name>GG_Inspector_OnFloat</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="116" column="6" declfile="xp/common/gg_inspect.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga6074bc928edde4d494179f827e7a4669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnBytes</definition>
        <argsstring>(GG_Inspector *self, const char *name, const uint8_t *data, size_t data_size)</argsstring>
        <name>GG_Inspector_OnBytes</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="117" column="6" declfile="xp/common/gg_inspect.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga69c583b19b993b878fabad7bc121e927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_Inspector_OnExtensible</definition>
        <argsstring>(GG_Inspector *self, const char *name, uint32_t data_type, const void *data, size_t data_size)</argsstring>
        <name>GG_Inspector_OnExtensible</name>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="121" column="6" declfile="xp/common/gg_inspect.h" declline="121" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1ga14750d8e8399709bed51ddf9cf2de94b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_Inspectable_Inspect</definition>
        <argsstring>(GG_Inspectable *self, GG_Inspector *inspector, const GG_InspectionOptions *options)</argsstring>
        <name>GG_Inspectable_Inspect</name>
        <param>
          <type><ref refid="struct_g_g___inspectable" kindref="compound">GG_Inspectable</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
          <declname>inspector</declname>
        </param>
        <param>
          <type>const <ref refid="struct_g_g___inspection_options" kindref="compound">GG_InspectionOptions</ref> *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="148" column="11" declfile="xp/common/gg_inspect.h" declline="148" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1gaf879844eb2bc275ad1ae07ea5cff631f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___errors_1gacf7401469f33ad0744f7f1f7006fd021" kindref="member">GG_Result</ref></type>
        <definition>GG_Result GG_LoggingInspector_Create</definition>
        <argsstring>(const char *logger_name, unsigned int logging_level, GG_LoggingInspector **inspector)</argsstring>
        <name>GG_LoggingInspector_Create</name>
        <param>
          <type>const char *</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>logging_level</declname>
        </param>
        <param>
          <type><ref refid="group___inspection_1ga71d0c1a8195213f1fa8c2cc37e459ac0" kindref="member">GG_LoggingInspector</ref> **</type>
          <declname>inspector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an inspector that logs all values it receives through callbacks. NOTE: a limitation of the current implementation is that this object cannot be destroyed while it is still indirectly referenced by the logging subsystem, which means that once used, it can only be destroyed after GG_LogManager_Configure has been called to reset any current logger tree.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logger_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the logger to use when logging. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logging_level</parametername>
</parameternamelist>
<parameterdescription>
<para>Logging level to use when logging. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inspector</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to where the inspector should be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>GG_SUCCESS if the object could be created, or a negative error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="169" column="11" declfile="xp/common/gg_inspect.h" declline="169" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1gafb879785c014d754a0b549e98a0949c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GG_LoggingInspector_Destroy</definition>
        <argsstring>(GG_LoggingInspector *self)</argsstring>
        <name>GG_LoggingInspector_Destroy</name>
        <param>
          <type><ref refid="group___inspection_1ga71d0c1a8195213f1fa8c2cc37e459ac0" kindref="member">GG_LoggingInspector</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy an instance.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="178" column="6" declfile="xp/common/gg_inspect.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___inspection_1gaaba079d01c49a96015bc535a192120cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> *</type>
        <definition>GG_Inspector* GG_LoggingInspector_AsInspector</definition>
        <argsstring>(GG_LoggingInspector *self)</argsstring>
        <name>GG_LoggingInspector_AsInspector</name>
        <param>
          <type><ref refid="group___inspection_1ga71d0c1a8195213f1fa8c2cc37e459ac0" kindref="member">GG_LoggingInspector</ref> *</type>
          <declname>self</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtain the <ref refid="struct_g_g___inspector" kindref="compound">GG_Inspector</ref> interface for a logging inspector object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>self</parametername>
</parameternamelist>
<parameterdescription>
<para>The object on which this method is invoked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="185" column="14" declfile="xp/common/gg_inspect.h" declline="185" declcolumn="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___inspection_1gac662c130ccbc1cbe42f980dd68345610" prot="public" static="no">
        <name>GG_IF_INSPECTION_ENABLED</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="xp/common/gg_inspect.h" line="37" column="10" bodyfile="xp/common/gg_inspect.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Object inspection </para>
    </detaileddescription>
  </compounddef>
</doxygen>
